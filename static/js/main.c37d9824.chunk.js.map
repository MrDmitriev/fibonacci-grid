{"version":3,"sources":["components/Wrappers/AppWrapper.tsx","components/Header/Header.tsx","components/Wrappers/Content.tsx","utils/grid.ts","components/FibonacciGrid/components/Cell.tsx","components/FibonacciGrid/components/Row.tsx","components/FibonacciGrid/FibonacciGrid.tsx","App.tsx","index.tsx"],"names":["AppWrapper","children","className","Header","Content","processCellClick","grid","row","column","updateRows","rowFound","cellIndex","console","log","incrementRowValues","updateColumns","ignoreRow","rowIndex","Number","incrementColumnValues","Cell","cell","cellNumber","rowNumber","onCellClick","onClick","Row","cells","Object","values","map","i","Grid","useState","rows","columns","k","createGrid","setGrid","setRows","handleCellClick","updatedGrid","App","FibonacciGrid","queryClient","QueryClient","ReactDOM","render","StrictMode","client","path","element","document","getElementById"],"mappings":"8NAYeA,EANqB,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SACrC,OACC,qBAAKC,UAAU,YAAf,SAA4BD,KCEfE,EARU,WACxB,OACC,wBAAQD,UAAU,SAAlB,SACC,oBAAIA,UAAU,gBAAd,+BCOYE,EANkB,SAAC,GAAuB,IAAtBH,EAAqB,EAArBA,SAClC,OACC,sBAAMC,UAAU,UAAhB,SAA2BD,K,OC6BhBI,EAAmB,SAACC,EAAWC,EAAaC,GACxD,IAAMC,EAnCoB,SAACH,EAAWC,GACtC,IAAMG,EAAWJ,EAAKC,GAEtB,IAAK,IAAII,KADTC,QAAQC,IAAI,WAAYH,GACFA,EACrBA,EAASC,KAEV,OAAOL,EA6BYQ,CAAmBR,EAAMC,GACtCQ,EA3BuB,SAACT,EAAWU,EAAmBR,GAC5D,IAAK,IAAIS,KAAYX,EAChBY,OAAOD,KAAcD,GACPV,EAAKW,GACbT,KAIX,OAAOF,EAmBea,CAAsBV,EAAYF,EAAKC,GAE7D,OAAOO,GCpBOK,EAdF,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,YAC3CZ,QAAQC,IAAI,OAAQQ,GAIpB,OACC,mCACC,qBAAKnB,UAAU,OAAOuB,QALA,WACvBD,EAAYD,EAAWD,IAItB,SACC,8BAAMD,SCGKK,EATH,SAAC,GAA0C,IAAzCnB,EAAwC,EAAxCA,IAAKgB,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,YACvBG,EAAQC,OAAOC,OAAOtB,GAC5B,OACC,qBAAKL,UAAU,MAAf,SACEyB,EAAMG,KAAI,SAACT,EAAMU,GAAP,OAAa,cAAC,EAAD,CAAcR,UAAWA,EAAWD,WAAYS,EAAGV,KAAMA,EAAMG,YAAaA,GAAjEO,SCYvBC,EArBF,WACZ,MAAwBC,mBHmBC,SAACC,EAAcC,GAExC,IADA,IAAM7B,EAAY,GACTyB,EAAE,EAAGA,EAAEG,EAAMH,IAAK,CAE1B,IADA,IAAMvB,EAAoC,GACjC4B,EAAE,EAAGA,EAAED,EAASC,IACxB5B,EAAO4B,GAAK,EAEb9B,EAAKyB,GAAKvB,EAGX,OAAOF,EG7B0B+B,CAAW,EAAG,IAA/C,mBAAO/B,EAAP,KAAagC,EAAb,KACA,EAAwBL,mBAASL,OAAOC,OAAOvB,IAA/C,mBAAO4B,EAAP,KAAaK,EAAb,KAEMC,EAAkB,SAACjC,EAAaC,GACrCI,QAAQC,IAAI,QAASN,EAAKC,GAC1B,IAAMiC,EAAcpC,EAAiBC,EAAMC,EAAKC,GAChDI,QAAQC,IAAI,cAAe4B,GAE3BH,EAAQG,GACRF,EAAQX,OAAOC,OAAOY,KAIvB,OADA7B,QAAQC,IAAI,OAAQqB,GAEnB,qBAAKhC,UAAU,iBAAf,SACEgC,EAAKJ,KAAI,SAACvB,EAAKwB,GAAN,OAAY,cAAC,EAAD,CAAaR,UAAWQ,EAAGxB,IAAKA,EAAKiB,YAAagB,GAAxCT,SCJpBW,EAXO,WACpB,OACE,eAAC,EAAD,WACD,cAAC,EAAD,IACA,cAAC,EAAD,UACC,cAACC,EAAD,UCGEC,EAAc,IAAIC,cAExBC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,sBAAD,CAAqBC,OAAQL,EAA7B,SACC,cAAC,IAAD,UACC,eAAC,IAAD,WACC,cAAC,IAAD,CAAOM,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,wBAAwBC,QAAS,cAAC,EAAD,MAC7C,cAAC,IAAD,CAAOD,KAAK,6BAA6BC,QAAS,cAAC,EAAD,eAKtDC,SAASC,eAAe,W","file":"static/js/main.c37d9824.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype Props = {\r\n\tchildren: React.ReactNode\r\n}\r\n\r\nconst AppWrapper: React.FC<Props> = ({children}: Props) => {\r\n\treturn (\r\n\t\t<div className='container'>{children}</div>\r\n\t)\r\n}\r\n\r\nexport default AppWrapper","import React from 'react'\r\n\r\nconst Header: React.FC = () => {\r\n\treturn (\r\n\t\t<header className='header'>\r\n\t\t\t<h1 className='header__title'>Fibonacci grid</h1>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\ntype Props = {\r\n\tchildren: React.ReactNode\r\n}\r\n\r\nconst Content: React.FC<Props> = ({children}: Props) => {\r\n\treturn (\r\n\t\t<main className='content'>{children}</main>\r\n\t)\r\n}\r\n\r\nexport default Content","import { Row } from \"../types/Row\";\r\n\r\n\r\nconst incrementRowValues = (grid: any, row: number) => {\r\n\tconst rowFound = grid[row];\r\n\tconsole.log('rowFound', rowFound)\r\n\tfor (let cellIndex in rowFound) {\r\n\t\trowFound[cellIndex]++;\r\n\t}\r\n\treturn grid;\r\n}\r\n\r\nconst incrementColumnValues = (grid: any, ignoreRow: number, column: number) => {\r\n\tfor (let rowIndex in grid) {\r\n\t\tif (Number(rowIndex) !== ignoreRow) {\r\n\t\t\tconst rowFound = grid[rowIndex];\r\n\t\t\trowFound[column]++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn grid;\r\n}\r\n\r\n\r\nexport const createGrid = (rows: number, columns: number) => {\r\n\tconst grid: Row = {};\r\n\tfor (let i=0; i<rows; i++) {\r\n\t\tconst column: {[index: number]: number} = {};\r\n\t\tfor (let k=0; k<columns; k++) {\r\n\t\t\tcolumn[k] = 0;\r\n\t\t}\r\n\t\tgrid[i] = column;\r\n\t}\r\n\r\n\treturn grid;\r\n}\r\n\r\nexport const processCellClick = (grid: any, row: number, column: number) => {\r\n\tconst updateRows = incrementRowValues(grid, row);\r\n\tconst updateColumns = incrementColumnValues(updateRows, row, column);\r\n\r\n\treturn updateColumns;\r\n}","type Props = {\r\n\tcell: number;\r\n\tcellNumber: number;\r\n\trowNumber: number;\r\n\tonCellClick: (row: number, column: number) => void;\r\n}\r\n\r\nconst Cell = ({cell, cellNumber, rowNumber, onCellClick }: Props) => {\r\n\tconsole.log('cell', cell);\r\n\tconst handleCellClick = () => {\r\n\t\tonCellClick(rowNumber, cellNumber);\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className='cell' onClick={handleCellClick}>\r\n\t\t\t\t<div>{cell}</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Cell","import React from 'react'\r\nimport { Cell as CellType } from '../../../types/Cell';\r\nimport Cell from './Cell';\r\ntype Props = {\r\n\trow: CellType;\r\n\trowNumber: number;\r\n\tonCellClick: (row: number, column: number) => void;\r\n};\r\n\r\nconst Row = ({row, rowNumber, onCellClick}: Props) => {\r\n\tconst cells = Object.values(row);\r\n\treturn (\r\n\t\t<div className='row'>\r\n\t\t\t{cells.map((cell, i) => <Cell key={i} rowNumber={rowNumber} cellNumber={i} cell={cell} onCellClick={onCellClick} />)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Row","import { useState } from 'react'\r\nimport { createGrid, processCellClick } from '../../utils/grid';\r\nimport Row from './components/Row'\r\n\r\nconst Grid = () => {\r\n\tconst [grid, setGrid] = useState(createGrid(5, 5));\r\n\tconst [rows, setRows] = useState(Object.values(grid));\r\n\r\n\tconst handleCellClick = (row: number, column: number) => { // use callback\r\n\t\tconsole.log('Click', row, column);\r\n\t\tconst updatedGrid = processCellClick(grid, row, column);\r\n\t\tconsole.log('updatedGrid', updatedGrid);\r\n\r\n\t\tsetGrid(updatedGrid);\r\n\t\tsetRows(Object.values(updatedGrid));\r\n\t}\r\n\t\r\n\tconsole.log('rows', rows);\r\n\treturn (\r\n\t\t<div className='fibonacci-grid'>\r\n\t\t\t{rows.map((row, i) => <Row key={i} rowNumber={i} row={row} onCellClick={handleCellClick} />)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Grid","import AppWrapper from './components/Wrappers/AppWrapper';\r\nimport Header from './components/Header/Header';\r\nimport Content from './components/Wrappers/Content';\r\nimport FibonacciGrid from './components/FibonacciGrid/FibonacciGrid';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <AppWrapper>\r\n\t\t\t<Header />\r\n\t\t\t<Content>\r\n\t\t\t\t<FibonacciGrid />\r\n\t\t\t</Content>\r\n    </AppWrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport { QueryClientProvider, QueryClient } from 'react-query';\r\nimport './styles/index.scss';\r\n\r\nimport App from './App';\r\n\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<QueryClientProvider client={queryClient}>\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Routes>\r\n\t\t\t\t\t<Route path=\"/\" element={<App />} />\r\n\t\t\t\t\t<Route path=\"/octopus-prehire-test\" element={<App />} />\r\n\t\t\t\t\t<Route path=\"/currency/detail/:currency\" element={<App />} />\r\n\t\t\t\t</Routes>\r\n\t\t\t</BrowserRouter>\r\n\t\t</QueryClientProvider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}